[{"/Users/Amanshu/Desktop/clipboard/src/index.js":"1","/Users/Amanshu/Desktop/clipboard/src/App.js":"2","/Users/Amanshu/Desktop/clipboard/src/reportWebVitals.js":"3","/Users/Amanshu/Desktop/clipboard/src/components/Clipboard.js":"4","/Users/Amanshu/Desktop/clipboard/src/components/Header.js":"5","/Users/Amanshu/Desktop/clipboard/src/components/ClipboardHistory.js":"6","/Users/Amanshu/Desktop/clipboard/src/components/HistoryItem.js":"7"},{"size":478,"mtime":1610645190078,"results":"8","hashOfConfig":"9"},{"size":143,"mtime":1610645785452,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610643297556,"results":"11","hashOfConfig":"9"},{"size":352,"mtime":1610793858087,"results":"12","hashOfConfig":"9"},{"size":328,"mtime":1610797611171,"results":"13","hashOfConfig":"9"},{"size":1596,"mtime":1610802447822,"results":"14","hashOfConfig":"9"},{"size":670,"mtime":1610798124146,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ldyvl3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/Users/Amanshu/Desktop/clipboard/src/index.js",[],["33","34"],"/Users/Amanshu/Desktop/clipboard/src/App.js",[],"/Users/Amanshu/Desktop/clipboard/src/reportWebVitals.js",[],"/Users/Amanshu/Desktop/clipboard/src/components/Clipboard.js",[],"/Users/Amanshu/Desktop/clipboard/src/components/Header.js",[],"/Users/Amanshu/Desktop/clipboard/src/components/ClipboardHistory.js",["35"],"/*global chrome*/\nimport React, { Component, Fragment } from 'react';\nimport HistoryItem from './HistoryItem';\nimport HistoryIcon from '../assets/history.png';\nimport EmptyIcon from '../assets/empty.png';\n\nclass ClipboardHistory extends Component {\n  state = {\n    history: []\n  };\n\n  componentDidMount() {\n    this.getClipboardHistory();\n  }\n\n  getClipboardHistory = () => {\n    const clipHistory = localStorage.getItem('clipHistory');\n    let history = ['Default Text Copied.'];\n    if (clipHistory) {\n      history = JSON.parse(clipHistory);\n    } else {\n      localStorage.setItem('clipHistory', JSON.stringify(history));\n    }\n    this.setState({ history });\n  };\n\n  render() {\n    return (\n      <div className=\"history\">\n        {this.state.history.length > 0 ? (\n          <Fragment>\n            <div className=\"history-title\">\n              <img src={HistoryIcon} alt=\"history icon\" />\n              <div>Your History</div>\n            </div>\n            <div className=\"history-list\">\n              {this.state.history.map(item => {\n                return <HistoryItem key={item} text={item}></HistoryItem>;\n              })}\n            </div>\n          </Fragment>\n        ) : (\n          <div className=\"empty-icon-container\">\n            <div className=\"empty-icon\">\n              <img src={EmptyIcon} alt=\"Empty\" />\n              <p className=\"empty-icon-text\">No Data Found</p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('copy', this.copyEventHandler);\n  }\n}\n\nexport default ClipboardHistory;\n","/Users/Amanshu/Desktop/clipboard/src/components/HistoryItem.js",["36"],"import React, { Component } from 'react';\nimport CopyIcon from '../assets/copy.png';\n\nclass HistoryItem extends Component {\n  state = {\n    copied: false\n  };\n\n  copyToClipboard = () => {\n    navigator.clipboard.writeText(this.props.text).then(\n      () => {\n        this.setState({ copied: true });\n      },\n      () => {}\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"history-item\">\n        <div className=\"history-item-text\">{this.props.text} </div>\n        <div className=\"copy-icon-container\">\n          <img className=\"copy-icon\" src={CopyIcon} onClick={this.copyToClipboard} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HistoryItem;\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":10,"nodeType":"43","messageId":"44","endLine":1,"endColumn":16},{"ruleId":"45","severity":1,"message":"46","line":23,"column":11,"nodeType":"47","endLine":23,"endColumn":86},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'chrome' is defined but never used.","Program","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]